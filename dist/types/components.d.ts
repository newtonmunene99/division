/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from './stencil.core';


export namespace Components {
  interface DvnButton {
    /**
    * Determines if a button is disabled or not
    * @type {boolean}
    */
    'disabled': boolean;
    /**
    * Determines the buttons fill type. Default is `filled`
    * @type {(`"clear"` | `"outline"` | `"filled"`)}
    * @memberof DvnButton
    */
    'fill': "clear" | "outline" | "filled";
    /**
    * Determines if the button is disabled because something is loading
    * @type {boolean}
    */
    'loading': boolean;
    /**
    * Determines if it's a raised button or flat button. Default is `raised`
    * @type {(`"raised"` | `"flat"`)}
    * @memberof DvnButton
    */
    'position': "raised" | "flat";
    /**
    * Determines if a button has rounded edges. Default is `default`
    * @type {(`"round"` | `"default"`)}
    * @memberof DvnButton
    */
    'shape': "round" | "default";
    /**
    * Determines the size of the button. Default is `default`
    * @type {(`"default"` | `"small"` | `"large"`)}
    * @memberof DvnButton
    */
    'size': "default" | "small" | "large";
    /**
    * This toggles the disabled state
    * @memberof DvnButton
    */
    'toggleDisabled': () => Promise<void>;
    /**
    * This toggles the loading state
    * @memberof DvnButton
    */
    'toggleLoading': () => Promise<void>;
    /**
    * Determines the button type. Default is `button`
    * @type {("button" | "submit" | "reset")}
    * @memberof DvnButton
    */
    'type': "button" | "submit" | "reset";
  }
  interface DvnCard {}
  interface DvnGallery {
    'color': string;
    'src': Array<any>;
  }
  interface DvnImage {
    'alt': string;
    'src': string;
  }
}

declare global {


  interface HTMLDvnButtonElement extends Components.DvnButton, HTMLStencilElement {}
  var HTMLDvnButtonElement: {
    prototype: HTMLDvnButtonElement;
    new (): HTMLDvnButtonElement;
  };

  interface HTMLDvnCardElement extends Components.DvnCard, HTMLStencilElement {}
  var HTMLDvnCardElement: {
    prototype: HTMLDvnCardElement;
    new (): HTMLDvnCardElement;
  };

  interface HTMLDvnGalleryElement extends Components.DvnGallery, HTMLStencilElement {}
  var HTMLDvnGalleryElement: {
    prototype: HTMLDvnGalleryElement;
    new (): HTMLDvnGalleryElement;
  };

  interface HTMLDvnImageElement extends Components.DvnImage, HTMLStencilElement {}
  var HTMLDvnImageElement: {
    prototype: HTMLDvnImageElement;
    new (): HTMLDvnImageElement;
  };
  interface HTMLElementTagNameMap {
    'dvn-button': HTMLDvnButtonElement;
    'dvn-card': HTMLDvnCardElement;
    'dvn-gallery': HTMLDvnGalleryElement;
    'dvn-image': HTMLDvnImageElement;
  }
}

declare namespace LocalJSX {
  interface DvnButton {
    /**
    * Determines if a button is disabled or not
    * @type {boolean}
    */
    'disabled'?: boolean;
    /**
    * Determines the buttons fill type. Default is `filled`
    * @type {(`"clear"` | `"outline"` | `"filled"`)}
    * @memberof DvnButton
    */
    'fill'?: "clear" | "outline" | "filled";
    /**
    * Determines if the button is disabled because something is loading
    * @type {boolean}
    */
    'loading'?: boolean;
    /**
    * Emits when the button is clicked. The event is only emmitted if the button type is set to `button`. Otherwise, it either resets or submits if used inside a form and type is set to either `submit` or  `reset`
    * @type {EventEmitter<MouseEvent>}
    * @memberof DvnButton
    */
    'onDivBtnClick'?: (event: CustomEvent<MouseEvent>) => void;
    /**
    * Determines if it's a raised button or flat button. Default is `raised`
    * @type {(`"raised"` | `"flat"`)}
    * @memberof DvnButton
    */
    'position'?: "raised" | "flat";
    /**
    * Determines if a button has rounded edges. Default is `default`
    * @type {(`"round"` | `"default"`)}
    * @memberof DvnButton
    */
    'shape'?: "round" | "default";
    /**
    * Determines the size of the button. Default is `default`
    * @type {(`"default"` | `"small"` | `"large"`)}
    * @memberof DvnButton
    */
    'size'?: "default" | "small" | "large";
    /**
    * Determines the button type. Default is `button`
    * @type {("button" | "submit" | "reset")}
    * @memberof DvnButton
    */
    'type'?: "button" | "submit" | "reset";
  }
  interface DvnCard {}
  interface DvnGallery {
    'color'?: string;
    'src'?: Array<any>;
  }
  interface DvnImage {
    'alt'?: string;
    'src'?: string;
  }

  interface IntrinsicElements {
    'dvn-button': DvnButton;
    'dvn-card': DvnCard;
    'dvn-gallery': DvnGallery;
    'dvn-image': DvnImage;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'dvn-button': LocalJSX.DvnButton & JSXBase.HTMLAttributes<HTMLDvnButtonElement>;
      'dvn-card': LocalJSX.DvnCard & JSXBase.HTMLAttributes<HTMLDvnCardElement>;
      'dvn-gallery': LocalJSX.DvnGallery & JSXBase.HTMLAttributes<HTMLDvnGalleryElement>;
      'dvn-image': LocalJSX.DvnImage & JSXBase.HTMLAttributes<HTMLDvnImageElement>;
    }
  }
}


